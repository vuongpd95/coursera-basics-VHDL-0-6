// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    Not16(in[0] = zx,
            in[1] = zx,
            in[2] = zx,
            in[3] = zx,
            in[4] = zx,
            in[5] = zx,
            in[6] = zx,
            in[7] = zx,
            in[8] = zx,
            in[9] = zx,
            in[10] = zx,
            in[11] = zx,
            in[12] = zx,
            in[13] = zx,
            in[14] = zx,
            in[15] = zx, out = notzx);
    And16(a = x, b = notzx, out = x0);
    Not(in = nx, out = notnx);
    And16(a = x0, b[0] = notnx,
                    b[1] = notnx,
                    b[2] = notnx,
                    b[3] = notnx,
                    b[4] = notnx,
                    b[5] = notnx,
                    b[6] = notnx,
                    b[7] = notnx,
                    b[8] = notnx,
                    b[9] = notnx,
                    b[10] = notnx,
                    b[11] = notnx,
                    b[12] = notnx,
                    b[13] = notnx,
                    b[14] = notnx,
                    b[15] = notnx, out = x01);
    Not16(in = x0, out = notx0);
    And16(a = notx0, b[0] = nx,
                    b[1] = nx,
                    b[2] = nx,
                    b[3] = nx,
                    b[4] = nx,
                    b[5] = nx,
                    b[6] = nx,
                    b[7] = nx,
                    b[8] = nx,
                    b[9] = nx,
                    b[10] = nx,
                    b[11] = nx,
                    b[12] = nx,
                    b[13] = nx,
                    b[14] = nx,
                    b[15] = nx, out = x02);
    Or16(a = x01, b = x02, out = x1);
    Not16(in[0] = zy,
            in[1] = zy,
            in[2] = zy,
            in[3] = zy,
            in[4] = zy,
            in[5] = zy,
            in[6] = zy,
            in[7] = zy,
            in[8] = zy,
            in[9] = zy,
            in[10] = zy,
            in[11] = zy,
            in[12] = zy,
            in[13] = zy,
            in[14] = zy,
            in[15] = zy, out = notzy);
    And16(a = y, b = notzy, out = y0);
    Not(in = ny, out = notny);
    And16(a = y0, b[0] = notny,
                    b[1] = notny,
                    b[2] = notny,
                    b[3] = notny,
                    b[4] = notny,
                    b[5] = notny,
                    b[6] = notny,
                    b[7] = notny,
                    b[8] = notny,
                    b[9] = notny,
                    b[10] = notny,
                    b[11] = notny,
                    b[12] = notny,
                    b[13] = notny,
                    b[14] = notny,
                    b[15] = notny, out = y01);
    Not16(in = y0, out = noty0);
    And16(a = noty0, b[0] = ny,
                    b[1] = ny,
                    b[2] = ny,
                    b[3] = ny,
                    b[4] = ny,
                    b[5] = ny,
                    b[6] = ny,
                    b[7] = ny,
                    b[8] = ny,
                    b[9] = ny,
                    b[10] = ny,
                    b[11] = ny,
                    b[12] = ny,
                    b[13] = ny,
                    b[14] = ny,
                    b[15] = ny, out = y02);
    Or16(a = y01, b = y02, out = y1);

    And16(a = x1, b = y1, out = x1andy1);
    Add16(a = x1, b = y1, out = x1addy1);
    Mux16(a = x1andy1, b = x1addy1, sel = f, out = out0);

    Not(in = no, out = notno);
    And16(a = out0, b[0] = notno,
                    b[1] = notno,
                    b[2] = notno,
                    b[3] = notno,
                    b[4] = notno,
                    b[5] = notno,
                    b[6] = notno,
                    b[7] = notno,
                    b[8] = notno,
                    b[9] = notno,
                    b[10] = notno,
                    b[11] = notno,
                    b[12] = notno,
                    b[13] = notno,
                    b[14] = notno,
                    b[15] = notno, out = out01);
    Not16(in = out0, out = notout0);
    And16(a = notout0, b[0] = no,
                    b[1] = no,
                    b[2] = no,
                    b[3] = no,
                    b[4] = no,
                    b[5] = no,
                    b[6] = no,
                    b[7] = no,
                    b[8] = no,
                    b[9] = no,
                    b[10] = no,
                    b[11] = no,
                    b[12] = no,
                    b[13] = no,
                    b[14] = no,
                    b[15] = no, out = out02);
    Or16(a = out01, b = out02, out[0] = out10,
                                out[1] = out11,
                                out[2] = out12,
                                out[3] = out13,
                                out[4] = out14,
                                out[5] = out15,
                                out[6] = out16,
                                out[7] = out17,
                                out[8] = out18,
                                out[9] = out19,
                                out[10] = out110,
                                out[11] = out111,
                                out[12] = out112,
                                out[13] = out113,
                                out[14] = out114,
                                out[15] = out115, out = out, out[15] = ng);

    Or(a = out10, b = out11, out = or0);
    Or(a = out12, b = out13, out = or1);
    Or(a = out14, b = out15, out = or2);
    Or(a = out16, b = out17, out = or3);
    Or(a = out18, b = out19, out = or4);
    Or(a = out110, b = out111, out = or5);
    Or(a = out112, b = out113, out = or6);
    Or(a = out114, b = out115, out = or7);
    Or(a = or0, b = or1, out = or8);
    Or(a = or2, b = or3, out = or9);
    Or(a = or4, b = or5, out = or10);
    Or(a = or6, b = or7, out = or11);
    Or(a = or8, b = or9, out = or12);
    Or(a = or10, b = or11, out = or13);
    Or(a = or12, b = or13, out = zrc);    
    Not(in = zrc, out = zr);
}