// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux(in = load, sel = address[14], a = l16K, b = load1);
    RAM16K(load = l16K, address[0] = address[0],
    						address[1] = address[1],
    						address[2] = address[2],
    						address[3] = address[3],
    						address[4] = address[4],
    						address[5] = address[5],
    						address[6] = address[6],
    						address[7] = address[7],
    						address[8] = address[8],
    						address[9] = address[9],
    						address[10] = address[10],
    						address[11] = address[11],
    						address[12] = address[12],
    						address[13] = address[13], in = in, out = out0);
    DMux(in = load1, sel = address[13], a = load2, b = load3);
    Screen(load = load2, address[0] = address[0],
    						address[1] = address[1],
    						address[2] = address[2],
    						address[3] = address[3],
    						address[4] = address[4],
    						address[5] = address[5],
    						address[6] = address[6],
    						address[7] = address[7],
    						address[8] = address[8],
    						address[9] = address[9],
    						address[10] = address[10],
    						address[11] = address[11],
    						address[12] = address[12], in = in, out = out1);
    Keyboard(out = out2);
    Mux4Way16(a = out0, 
    			b = out0, 
    			c = out1, 
    			d = out2, sel[1] = address[14],
    					  	sel[0] = address[13], out = out);
}